{%for table in schema.tables%}
import { {{table.name}} } from "{{basePath+table.pathToModel}}";
{%if table.isHistoried%}
import { h{{table.name}} } from "{{historyPath+table.pathToModel}}";
{% endif %}
{% endfor %}
import {createConnection, ConnectionOptions} from "typeorm";

export async function create{{data.name}}{{schema.namespace}}() {
    const pgp = require("pg-promise")({});
              await pgp.end();
    var connectionString = "postgres://" + process.env.dbusername1 + ":" +
    process.env.dbpassword1 + "@" + process.env.dbhost1 + ":" + process.env.dbport1 + "/postgres";
    const db = pgp(connectionString);
    var res = await db.oneOrNone("SELECT 1 FROM pg_database WHERE datname = " + "'" + process.env.{{data.dbdatabase}} + "'");
    if (res === null) {
          var str = "CREATE DATABASE " + process.env.{{data.dbdatabase}} ;
          await db.query(str);
    }
    await pgp.end();
    return await createConnection({
    type: "postgres",
    host:  process.env.{{data.dbhost}},
    port: process.env.{{data.dbport}},
    username:  process.env.{{data.dbusername}},
    password: process.env.{{data.dbpassword}},
    database: process.env.{{data.dbdatabase}},
    entities: [
{% for table in schema.tables %}
      {{table.name}}
{% if table.isHistoried%}
      ,h{{table.name}}
{% endif %}
{%if table !== schema.tables[schema.tables.length-1]%}
,
{%endif%}
{%endfor%}
],
        schema: "{{schema.namespace}}",
        synchronize: {{options.reCreate}},
        dropSchema: {{options.reCreate}}
         })
         .catch(error => console.log(error))
         .then(connection => connection.close());
}