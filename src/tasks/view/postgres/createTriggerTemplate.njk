/*Codegen*/
// tslint:disable
/* eslint-disable */

{%for table in schema.tables%}
{%if table.historyPath%}
import { h{{table.modelName}} } from '{{table.historyPath}}';
{% endif %}
{% endfor %}
import {createConnection, ConnectionOptions} from 'typeorm';

const pgPromise = require('pg-promise');

{%for table in schema.tables%}
{% if table.historyPath %}
export const {{table.name}}_{{schema.namespace}}_trigger_string = 'create trigger add_to_{{table.name.toLowerCase()}}_h_{{schema.namespace.toLowerCase()}} after insert or delete or update on "{{schema.namespace.toLowerCase()}}"."{{table.name.toLowerCase()}}" for each row execute procedure {% if postgresKeywords.includes(table.name.toUpperCase()) === true %}\"{% endif%}{{schema.namespace.toLowerCase()}}{%if postgresKeywords.includes(table.name.toUpperCase()) === true %}\"{% endif%}.add_to_history_{{schema.namespace.toLowerCase()}}_{{table.name.toLowerCase()}}();';
{%endif%}
{%endfor%}

export async function create{{data.name}}Triggers{{schema.namespace.toLowerCase()}}() {
    const pgp = pgPromise({});
    await pgp.end();
    const connectionString = 'postgres://' + process.env.{{data.dbusername}} + ':' +
    process.env.{{data.dbpassword}} + '@' + process.env.{{data.dbhost}} + ':' + process.env.{{data.dbport}} + '/' + process.env.{{data.dbdatabase}};
    const db = pgp(connectionString);

{%for table in schema.tables%}
{% if table.historyPath %}
    await db.none({{table.name}}_{{schema.namespace}}_trigger_string);
{%endif%}
{%endfor%}
    pgp.end();
}
